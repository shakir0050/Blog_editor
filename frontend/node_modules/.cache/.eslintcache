[{"C:\\Users\\Lenovo\\Desktop\\projectshakir\\frontend\\src\\index.js":"1","C:\\Users\\Lenovo\\Desktop\\projectshakir\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\Lenovo\\Desktop\\projectshakir\\frontend\\src\\App.js":"3","C:\\Users\\Lenovo\\Desktop\\projectshakir\\frontend\\src\\components\\blogsView.js":"4"},{"size":535,"mtime":1747418481492,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1747418481694,"results":"7","hashOfConfig":"6"},{"size":7004,"mtime":1747679320249,"results":"8","hashOfConfig":"6"},{"size":173,"mtime":1747423209738,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pbuc8w",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Lenovo\\Desktop\\projectshakir\\frontend\\src\\index.js",[],[],"C:\\Users\\Lenovo\\Desktop\\projectshakir\\frontend\\src\\reportWebVitals.js",[],[],"C:\\Users\\Lenovo\\Desktop\\projectshakir\\frontend\\src\\App.js",["22","23"],[],"C:\\Users\\Lenovo\\Desktop\\projectshakir\\frontend\\src\\components\\blogsView.js",[],[],{"ruleId":"24","severity":1,"message":"25","line":27,"column":21,"nodeType":"26","endLine":27,"endColumn":61},{"ruleId":"27","severity":1,"message":"28","line":55,"column":11,"nodeType":"29","messageId":"30","endLine":55,"endColumn":14},"react-hooks/exhaustive-deps","Assignments to the 'typingTimer' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","no-unused-vars","'res' is assigned a value but never used.","Identifier","unusedVar"]